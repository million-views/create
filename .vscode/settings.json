{
    "kiroAgent.configureMCP": "Enabled",
    "kiroAgent.trustedCommands": [
        "npm install",
        "npm ci",
        "npm run *",
        "npm start *",
        "npm test *",
        "node -e \"console.log('✅ package.json is valid JSON'); const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8')); console.log('✅ bin entry:', pkg.bin['m5nv-create']); console.log('✅ exports entry:', pkg.exports['.']); console.log('✅ minimist removed:', !pkg.dependencies || !pkg.dependencies.minimist);\"",
        "node -e \"const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8')); console.log('✅ Bin entry:', pkg.bin); console.log('✅ Exports:', pkg.exports); console.log('✅ Dependencies:', Object.keys(pkg.dependencies || {})); console.log('✅ minimist removed:', !pkg.dependencies?.minimist);\"",
        "node --check bin/index.mjs",
        "node bin/index.mjs --help",
        "node bin/index.mjs",
        "node bin/index.mjs my-project",
        "node bin/index.mjs my-project --from-template react",
        "node bin/index.mjs my-project -t react -r test/repo -b main",
        "node bin/index.mjs ../malicious --from-template ../../etc/passwd",
        "node bin/index.mjs my-project --from-template react --unknown-flag value",
        "node bin/index.mjs my-project --from-template frontend/react",
        "node -e \"\nimport('./bin/argumentParser.mjs').then(({ parseArguments, validateArguments }) => {\n  // Test various argument combinations\n  const tests = [\n    { args: ['my-project', '--from-template', 'react'], desc: 'Basic valid args' },\n    { args: ['my-project', '-t', 'react', '-r', 'user/repo', '-b', 'main'], desc: 'All short flags' },\n    { args: ['--help'], desc: 'Help flag' },\n    { args: [], desc: 'No args' },\n    { args: ['my-project'], desc: 'Missing template' }\n  ];\n  \n  tests.forEach(test => {\n    try {\n      const parsed = parseArguments(test.args);\n      const validation = validateArguments(parsed);\n      console.log(\\`✅ \\${test.desc}: \\${validation.isValid ? 'VALID' : 'INVALID'}\\`);\n      if (!validation.isValid && validation.errors) {\n        console.log(\\`   Errors: \\${validation.errors.join(', ')}\\`);\n      }\n    } catch (error) {\n      console.log(\\`❌ \\${test.desc}: ERROR - \\${error.message}\\`);\n    }\n  });\n});\n\"",
        "node -e \"\nimport('./bin/argumentParser.mjs').then(({ parseArguments, validateArguments }) => {\n  const parsed = parseArguments(['my-project', '--from-template', 'react']);\n  const validation = validateArguments(parsed);\n  console.log('Parsed:', JSON.stringify(parsed, null, 2));\n  console.log('Valid:', validation.isValid);\n}).catch(console.error);\n\"",
        "node -c bin/security.mjs",
        "node -c bin/argumentParser.mjs",
        "node -c bin/index.mjs",
        "node -e \"\nimport { validateProjectDirectory, validateTemplateName, validateRepoUrl, sanitizeBranchName, ValidationError } from './bin/security.mjs';\n\n// Test valid inputs\nconsole.log('Testing valid inputs...');\ntry {\n  console.log('✅ Project dir:', validateProjectDirectory('my-project'));\n  console.log('✅ Template:', validateTemplateName('react'));\n  console.log('✅ Repo URL:', validateRepoUrl('user/repo'));\n  console.log('✅ Branch:', sanitizeBranchName('main'));\n} catch (e) {\n  console.log('❌ Unexpected error:', e.message);\n}\n\n// Test invalid inputs\nconsole.log('\\nTesting invalid inputs...');\ntry {\n  validateProjectDirectory('../evil');\n} catch (e) {\n  console.log('✅ Caught path traversal:', e.message);\n}\n\ntry {\n  validateTemplateName('../../etc/passwd');\n} catch (e) {\n  console.log('✅ Caught template traversal:', e.message);\n}\n\ntry {\n  sanitizeBranchName('evil; rm -rf /');\n} catch (e) {\n  console.log('✅ Caught branch injection:', e.message);\n}\n\nconsole.log('\\n✅ Security module tests passed!');\n\"",
        "node bin/index.mjs ../evil --from-template \"../../etc/passwd\"",
        "node bin/index.mjs test-project --from-template react --branch \"evil; rm -rf /\"",
        "node bin/index.mjs docs --from-template test",
        "node bin/index.mjs test-project --from-template react",
        "chmod +x test/cli.test.mjs",
        "node bin/index.mjs test-project --from-template ../../../etc/passwd",
        "node bin/index.mjs test-project --from-template basic --branch \"main; rm -rf /\"",
        "mkdir test-existing-dir && echo \"content\" > test-existing-dir/file.txt",
        "node bin/index.mjs test-existing-dir --from-template basic",
        "rm -rf test-existing-dir",
        "node bin/index.mjs test-project-sanitize --from-template basic --repo /nonexistent/path/with/sensitive/info",
        "node bin/index.mjs test-project-sanitize --from-template basic --repo /nonexistent/path/with/sensitive/info 2>&1 | grep -i \"sensitive\\|secret\"",
        "node bin/index.mjs test-project-null --from-template basic 2>&1",
        "find . -name \".tmp-template-*\" -type d | wc -l",
        "node test/cli.test.mjs",
        "ls -la | grep test-",
        "node test/argumentParser.test.mjs",
        "node test/environmentFactory.test.mjs",
        "node bin/index.mjs *",
        "node test/security.test.mjs",
        "node test/cli.test.mjs | grep -A 5 -B 5 \"npm create\\|npx.*create-scaffold\\|Help text displays correct package name\"",
        "node test/spec-compliance-verification.mjs | grep -A 3 -B 1 \"npm create.*npx\"",
        "node bin/index.mjs test-project --from-template test 2>&1 | head -10",
        "node bin/index.mjs 2>&1 | head -10",
        "node bin/index.mjs invalid-project --from-template ../bad-template 2>&1"
    ]
}