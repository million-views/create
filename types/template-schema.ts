// @generated by scripts/build-template-schema.mjs
// Source: schema/template.v1.json

export const TEMPLATE_SCHEMA_VERSION = 'template.v1' as const;
export const TEMPLATE_SCHEMA_PATH = 'schema/template.v1.json' as const;

export type TemplateAuthoringMode = 'wysiwyg' | 'composable';
export type TemplatePlaceholderType = 'string' | 'number' | 'boolean';
export type TemplateDimensionType = 'single' | 'multi';
export type TemplateDimensionPolicy = 'strict' | 'warn';
export type TemplateCanonicalVariableName = 'author' | 'license';

export type TemplatePlaceholderPrimitive = string | number | boolean;
export type TemplateDimensionValue = string;
export type TemplateDimensionRelation = Record<TemplateDimensionValue, TemplateDimensionValue[]>;

export interface TemplatePlaceholder {
  name: string;
  description?: string;
  required?: boolean;
  sensitive?: boolean;
  type?: TemplatePlaceholderType;
  default?: TemplatePlaceholderPrimitive;
}

interface TemplateDimensionBase {
  values: TemplateDimensionValue[];
  requires?: TemplateDimensionRelation;
  conflicts?: TemplateDimensionRelation;
  policy?: TemplateDimensionPolicy;
  builtIn?: boolean;
  description?: string;
}

export interface TemplateSingleSelectDimension extends TemplateDimensionBase {
  type: 'single';
  default?: TemplateDimensionValue | null;
}

export interface TemplateMultiSelectDimension extends TemplateDimensionBase {
  type: 'multi';
  default?: TemplateDimensionValue[];
}

export type TemplateDimension = TemplateSingleSelectDimension | TemplateMultiSelectDimension;
export type TemplateDimensions = Record<string, TemplateDimension>;

export interface TemplateCanonicalVariableOverrides {
  description?: string;
  default?: TemplatePlaceholderPrimitive;
  sensitive?: boolean;
  type?: TemplatePlaceholderType;
}

export interface TemplateCanonicalVariable {
  name: TemplateCanonicalVariableName;
  required?: boolean;
  overrides?: TemplateCanonicalVariableOverrides;
}

export interface TemplateMetadata {
  placeholders?: TemplatePlaceholder[];
  variables?: TemplateCanonicalVariable[];
  [key: string]: unknown;
}

export interface TemplateSetup {
  authoringMode?: TemplateAuthoringMode;
  authorAssetsDir?: string;
  dimensions?: TemplateDimensions;
  supportedOptions?: TemplateDimensionValue[];
}

export interface TemplateManifest {
  name: string;
  description: string;
  handoff?: string[];
  metadata?: TemplateMetadata;
  setup?: TemplateSetup;
  [key: string]: unknown;
}

